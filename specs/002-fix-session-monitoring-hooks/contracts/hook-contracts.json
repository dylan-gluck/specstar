{
  "hooks": {
    "session_start": {
      "input": {
        "type": "object",
        "required": ["session_id", "source"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "type": "string",
            "enum": ["startup", "resume", "clear"]
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0,
          "block": 2
        }
      },
      "side_effects": [
        "Creates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/session_start.json"
      ]
    },
    "user_prompt_submit": {
      "input": {
        "type": "object",
        "required": ["session_id", "prompt"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "prompt": {
            "type": "string"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0,
          "block": 2
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/user_prompt_submit.json"
      ]
    },
    "pre_tool_use": {
      "input": {
        "type": "object",
        "required": ["session_id", "tool_name", "tool_input"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "tool_name": {
            "type": "string"
          },
          "tool_input": {
            "type": "object"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0,
          "block": 2
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json (for Task tool)",
        "Appends to .specstar/logs/pre_tool_use.json"
      ]
    },
    "post_tool_use": {
      "input": {
        "type": "object",
        "required": ["session_id", "tool_name", "tool_input", "tool_response"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "tool_name": {
            "type": "string"
          },
          "tool_input": {
            "type": "object"
          },
          "tool_response": {
            "type": "object"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/post_tool_use.json"
      ]
    },
    "notification": {
      "input": {
        "type": "object",
        "required": ["session_id", "message"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/notification.json"
      ]
    },
    "pre_compact": {
      "input": {
        "type": "object",
        "required": ["session_id", "transcript_path", "trigger"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "transcript_path": {
            "type": "string"
          },
          "trigger": {
            "type": "string",
            "enum": ["manual", "auto"]
          },
          "custom_instructions": {
            "type": "string"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Appends to .specstar/logs/pre_compact.json"
      ]
    },
    "session_end": {
      "input": {
        "type": "object",
        "required": ["session_id", "reason"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "reason": {
            "type": "string",
            "enum": ["clear", "logout", "prompt_input_exit", "other"]
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/session_end.json"
      ]
    },
    "stop": {
      "input": {
        "type": "object",
        "required": ["session_id", "stop_hook_active"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "stop_hook_active": {
            "type": "boolean"
          },
          "transcript_path": {
            "type": "string"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Updates .specstar/sessions/{session_id}/state.json",
        "Appends to .specstar/logs/stop.json"
      ]
    },
    "subagent_stop": {
      "input": {
        "type": "object",
        "required": ["session_id", "stop_hook_active"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "stop_hook_active": {
            "type": "boolean"
          },
          "transcript_path": {
            "type": "string"
          }
        }
      },
      "output": {
        "exit_code": {
          "success": 0
        }
      },
      "side_effects": [
        "Appends to .specstar/logs/subagent_stop.json"
      ]
    }
  },
  "state_operations": {
    "atomic_write": {
      "description": "All state updates must use atomic write pattern",
      "steps": [
        "Write to {file}.tmp",
        "Rename {file}.tmp to {file}"
      ]
    },
    "log_append": {
      "description": "Log files are append-only JSON arrays",
      "format": "[{entry1}, {entry2}, ...]"
    }
  },
  "error_handling": {
    "strategy": "graceful_degradation",
    "rules": [
      "Log all errors to error log",
      "Exit with code 0 to not block Claude Code",
      "Never exit with non-zero code except 2 for intentional blocking"
    ]
  }
}